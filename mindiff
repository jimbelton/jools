#!/usr/bin/python

import argparse
import os
import re
import subprocess
import sys

numPat = None

parser = argparse.ArgumentParser()
parser.add_argument("-m", "--meld",  action="store_true", help="meld the two files rather than diffing them")
parser.add_argument("-s", "--strip", type=int,            help="strip STRIP leading blank separated fields")
parser.add_argument("-x", "--hex",   action="store_true", help="minimize differences due to hex strings")
parser.add_argument("file1",                              help="first file to compare")
parser.add_argument("file2",                              help="second file to compare")
args = parser.parse_args()

fileNames = [args.file1, args.file2]
fileLines = [[], []]

if args.strip:
    stripRe = re.compile(r'\s*' + r'\S+\s+' * args.strip + r'(.*)', re.DOTALL)

for i in (0, 1):
    fileIn = open(fileNames[i])

    if args.strip:
        fileStripped = fileNames[i] + ".stripped"
        fileOut      = open(fileStripped, "w")

    for line in fileIn:
        if args.strip:
            match = stripRe.match(line)

            if match:
                line = match.group(1)

            fileOut.write(line)

        fileLines[i].append(line)

    fileIn.close()

    if args.strip:
        fileOut.close()
        fileNames[i] = fileStripped

if args.hex:
    changeRe  = re.compile(r'(\d+)(?:,(\d+))?c(\d+)(?:,(\d+))?$')
    hexDigits = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"}

    try:
        diff = subprocess.check_output(["diff", fileNames[0], fileNames[1]])
    except subprocess.CalledProcessError as exception:
        diff = exception.output

    for line in diff.split("\n"):
        match = changeRe.match(line)

        if match:
            print "***" + line
            (first1, last1, first2, last2) = match.groups()
            last1  = int(last1 or first1) - 1
            first1 = int(first1) - 1
            last2  = int(last2 or first2) - 1
            first2 = int(first2) - 1

            if last1 - first1 == last2 - first2:
                print "{},{}c{},{}".format(first1, last1, first2, last2)

                for i in range(first1, last1 + 1):
                    print i
                    line0 = fileLines[0][i]
                    line1 = fileLines[1][i - first1 + first2]
                    len0  = len(line0)

                    if len0 == len(line1):
                        print ">" + line0 +  "---\n" + "<" + line1
                        numberStart = None

                        for j in range(len0):
                            char0      = line0[j]
                            char1      = line1[j]
                            bothDigits = char0 in hexDigits and char1 in hexDigits

                            if bothDigits:
                                numberStart = numberStart or j

                            else:
                                if line0[numberStart:j] != line1[numberStart:j]:
                                    print line0[numberStart:j] +  " -> " + line1[numberStart:j]
                                    line0 = line0[:numberStart] + line1[numberStart:j] + line0[j:]

                                numberStart = None

                            if char0 == char1:
                                continue

                            if not bothDigits:
                                break

                        if line0 != line1:
                            print ">" + fileLines[0][i] +  "---\n" + "<" + line1

                        elif fileLines[0][i] != line0:
                            fileLines[0][i] = line0

                    else:
                        print ">>" + line0 +  "---\n" + "<<" + line1

    fileOut = open(fileNames[0] + ".minned", "w")

    for line in fileLines[0]:
        fileOut.write(line)

    fileOut.close()

sys.exit(0)
if args.meld:
    sys.exit(os.system("meld {} {}".format(fileNames[0], fileNames[1])))
else:
    sys.exit(os.system("diff {} {}".format(fileNames[0], fileNames[1])))
