#!/usr/bin/python

import argparse
import os
import re
import sys

#def usage():
#    sys.exit("""\
#usage: """ + __file__ + """ [-A #] [-c] [-d dir] [-e ext|-f file] [-lns] [-x file] [directory] [pattern]
#       List names of files in directory (default .), or lines of files matching pattern if specified
#    -A #:    include # extra lines of context after a matching line
#    -c:      ignore comments (e.g. <!-- ... -->)
#    -d dir:  path must include '/dir/' (dir is a regular expression)
#    -e ext:  file name must end in 'ext' (ext is a string); exludes -f
#    -f file: file name must match 'file' (file is a regular expression)
#    -l:      only print the names of files even if a pattern is specified
#    -n:      include line numbers in output
#    -q:      suppress warning messages
#    -s:      suppress noise from common output files (e.g. TEST-*.xml)
#    -x file: exclude if base name matches 'file' (file is a regular expression)
#""")

argumentParser = argparse.ArgumentParser(
        description="List the files in a directory (default .), or the lines of files matching a pattern if specified")
argumentParser.add_argument("-A", "--after-context",   help="print AFTER_CONTEXT extra lines after a match", default=0, type=int)
fileCriteria = argumentParser.add_mutually_exclusive_group()
fileCriteria.add_argument("-e", "--extension",         help="file names must end in the string 'EXTENSION'")
fileCriteria.add_argument("-f", "--file-pat",          help="file name must match the regular expression /FILE_PAT/")
argumentParser.add_argument("-x", "--exclude",         help="file name must not match the regular expression /EXCLUDE/")
argumentParser.add_argument("-N", "--no-line-numbers", help="don't include line numbers in output", action='store_true')
argumentParser.add_argument("directory",               help="directory to search (defaults to '.')", default=".", nargs='?')
argumentParser.add_argument("pattern",                 help="pattern to search for (list files by default)", nargs='?')
arguments = argumentParser.parse_args()

#my %options;
#scalar(scalar(@ARGV) != 0) && getopts('A:cd:e:f:lnqsx:', \%options) or usage();
#$options{e} && $options{f} and usage();

# If the no pattern argument was specified and the argument isn't a directory, use it as the pattern and default the directory to .
if not arguments.pattern and not os.path.isdir(arguments.directory):
    arguments.pattern   = arguments.directory
    arguments.directory = "."

#my $dirExp   = $options{d}       ? qr/\/$options{d}(\/|$)/ : undef;

# Special case for c and h
if arguments.extension == ".[ch]":
    arguments.extension = None
    arguments.file_pat  = r'.+\.[ch]'

filePat = re.compile(arguments.file_pat + '$') if arguments.file_pat else None
exclPat = re.compile(arguments.exclude  + '$') if arguments.exclude  else None

#my $pruneExp = undef;
pattern = re.compile(arguments.pattern) if arguments.pattern else None

#
#if ($options{s} && $options{e} =~ /\.xml$/) {
#    $exclExp  = $options{x} ? qr/($options{x}|TEST-.+\.xml)$/ : qr/TEST-.+\.xml$/;
#    $pruneExp = qr/\/testData\//;
#}
#
#my $comment = undef;
#
#if ($options{c} && $options{e} =~ /\.xml$/) {
#    $comment = "<!--.*-->";
#}

def fileIsWanted(filePath, fileName=None):
    if arguments.extension:
        if not filePath.endswith(arguments.extension):
            return False

    elif arguments.file_pat:
        fileName = fileName or os.path.basename(filePath)

        if not filePat.match(fileName):
            return False

    if arguments.exclude:
        if exclPat.match(fileName if fileName else os.path.basename(filePath)):
            return False

    return True

if sys.stdout.isatty():
    print "=" * 79

directories = os.walk(arguments.directory, followlinks=True)

for directory in directories:
    # if not grepping, apply filters and if met, list the directory

    if not pattern and fileIsWanted(directory[0]):
        print directory[0]

    for fileName in sorted(directory[2]):
        filePath = directory[0] + "/" + fileName

#        if ($options{d}) {
#            return if $File::Find::name !~ $dirExp;
#        }

        if not fileIsWanted(filePath, fileName):
            continue
#
#        if ($pruneExp) {
#            return if $File::Find::name =~ $pruneExp;
#        }

        # If not grepping, just print the file name

        if not pattern:
            print filePath
            continue

        try:
            with open(filePath) as fileStream:
                fileLines = fileStream.readlines()
        except IOError as error:
            if not os.path.islink(filePath) or os.path.exists(os.path.realpath(filePath)):
                raise error

            sys.stderr.write("Symbolic link '{}' points to non existent file '{}'\n".format(filePath, os.path.realpath(filePath)))
            continue

#        if (!open($file, "<", $_)) {
#            if (-l $_) {
#                print "warning: Can't open link '" . $File::Find::name . "'\n" if !$options{q};
#                return;
#            }
#
#            die("$0: Can't open '" . $File::Find::name . "'");
#        }

        context = 0

        for (lineNumber, line) in enumerate(fileLines, start=1):
#            if ($comment) {
#                $line =~ s/${comment}//g;
#            }

            if pattern.search(line):
#                if ($options{l}) {
#                    print $File::Find::name . ($options{n} ? ":" . $. : "") . "\n";
#                    last;
#                }

                print filePath + ("" if arguments.no_line_numbers else ":" + str(lineNumber)) + ":" + line,
                context = arguments.after_context

            elif context > 0:
                print filePath + ("" if arguments.no_line_numbers else ":" + str(lineNumber)) + ":" + line,
                context -= 1
#
#        close $file;
#    },
#    ($ARGV[0])
#);

#sys.exit(0)
