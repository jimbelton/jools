#!/usr/bin/python3

import argparse
import filecmp
import json
import os
import re
import shutil
import subprocess
import sys

def list_append(listref, element):
    if listref:
        listref.append(element)
        return listref

    return [element]

argumentParser = argparse.ArgumentParser(description="Show the differences between a set of files and a backup copy")
argumentParser.add_argument("-H", "--hostname", help="name of the backup host; if no MAC specified, look up in ~/.hosttomac")
argumentParser.add_argument("-M", "--mac",      help="ethernet MAC address; if specified write to ~/.hosttomac")
argumentParser.add_argument("-m", "--move",     action='store_true', help="move files in the backup to match the source tree")
argumentParser.add_argument("-n", "--noaction", action='store_true', help="take no actual action, only tell what would be done")
argumentParser.add_argument("-r", "--rename",   action='store_true', help="rename files in the backup to match the source tree")
argumentParser.add_argument("-u", "--update",   action='store_true', help="update files in the backup to match the source tree")
argumentParser.add_argument("-d", "--debug",    action='store_true', help="print out a lot of information helpful in debugging")
argumentParser.add_argument("source", nargs="?", default=".", help="the source directory")
argumentParser.add_argument("backup",                         help="the backup directory")
arguments = argumentParser.parse_args()

hostToMac = {}

try:
    with open(os.getenv("HOME") + "/.hosttomac") as hostToMacFP:
        hostToMac = json.load(hostToMacFP)
except IOError as error:
    if os.path.exists(os.path.realpath(os.getenv("HOME") + "/.hosttomac")):
        raise error

if arguments.hostname:
    if arguments.mac:
        if hostToMac.get(arguments.hostname) and arguments.mac != hostToMac[arguments.hostname]:
            sys.exit("Host " + arguments.hostname + " is already in ~/.hosttomac with MAC "
                   + hostToMac[arguments.hostname] + " but you specified " + arguments.mac)

    elif hostToMac.get(arguments.hostname):
        arguments.mac = hostToMac[arguments.hostname]

    else:
        sys.exit("Host " + arguments.hostname + " specified without a MAC and not found in ~/.hosttomac")

    output  = subprocess.check_output(["arp", "-n"], text=True)
    linePat = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+ether\s+'
                       + r'([\da-f][\da-f]:[\da-f][\da-f]:[\da-f][\da-f]:[\da-f][\da-f]:[\da-f][\da-f]:[\da-f][\da-f])')
    hostIp  = None

    for line in output.split('\n'):
        match = linePat.match(line)

        if match:
            if match.group(2) == arguments.mac:
                hostIp = match.group(1)

    if not hostIp:
        sys.stderr.write(output)
        sys.exit("MAC address " + arguments.mac + " not found in arp -n output; try running: sudo arp-scan -l")

    if not hostToMac.get(arguments.hostname):
        hostToMac[arguments.hostname] = arguments.mac

        with open(os.getenv("HOME") + "/.hosttomac", "w") as hostToMacFP:
            json.dump(hostToMac, hostToMacFP)

    print(hostIp)

print(arguments)
source_path_len = len(os.path.abspath(arguments.source)) + 1    # roots from os.walk include absolute paths
backup_path_len = len(os.path.abspath(arguments.backup)) + 1    # roots from os.walk include absolute paths

# Build a model of the backup

files_by_size   = {}
files_by_name   = {}

for root, dirs, files in os.walk(arguments.backup):
    for name in files:
        size = os.path.getsize(os.path.join(root, name))
        file = {"name": name, "dir": root[backup_path_len:], "size": size};
        files_by_size[size] = list_append(files_by_size.get(size), file)
        files_by_name[name] = list_append(files_by_name.get(name), file)

for root, dirs, files in os.walk(arguments.source):
    dir = root[source_path_len:]

    for name in files:
        path       = os.path.join(root, name)
        size       = os.path.getsize(path)
        back_files = files_by_name.get(name)

        if arguments.debug:
            print("File {} ({} bytes)".format(path, size))

        if back_files:
            if len(back_files) == 1:
                if size == back_files[0]['size']:
                    if arguments.move and dir != back_files[0]['dir']:
                        # if arguments.noaction:
                        print("Would move {} from {} to {}".format(name, back_files[0]['dir'], dir))
                elif arguments.update:
                    if dir == back_files[0]['dir']:
                        if arguments.noaction:
                            print("Would update {} in {}".format(name, back_files[0]['dir'] if  back_files[0]['dir'] else "."))
                        else:
                            shutil.copyfile(path, os.path.join(arguments.backup, dir, name))
                    elif arguments.move:
                        # if arguments.noaction:
                        print("Would update and move {} from {} to {}".format(name, back_files[0]['dir'], dir))

            continue

        back_files = files_by_size.get(size)

        if back_files:
            if len(back_files) == 1:
                if filecmp.cmp(path, os.path.join(arguments.backup, back_files[0]["dir"], back_files[0]["name"])):
                    if arguments.rename:
                        # if arguments.noaction:
                        print("Would rename {} from {} to {}".format(name, back_files[0]['dir'], dir))

            continue

        if arguments.noaction:
            print("Would copy new file {} to {}".format(path, os.path.join(arguments.backup, dir, name)))
        else:
            os.makedirs(os.path.join(arguments.backup, dir), exist_ok=True)
            shutil.copyfile(path, os.path.join(arguments.backup, dir, name))
